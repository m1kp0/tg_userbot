# –≤ –±–æ—Ç–µ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –Ω–µ —é–∑–∞–π—Ç–µ

# –∏–º–ø–æ—Ä—Ç
from telethon import *
import datetime
import time
import os

# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
zametks = []

# –∞–ø–∏
api_id = 1234567
api_hash = "–∞—Ä—Ä—Ä"

# –±–æ—Ç
m1kp = TelegramClient(
    "session_1",
    api_id=api_id, 
    api_hash=api_hash
)

# —Ñ—É–Ω–∫—Ü–∏–∏
# —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@m1kp.on(events.NewMessage(outgoing=True, pattern=r".-"))
async def delete_msg(event):
    msg = await event.get_reply_message()
    if event and msg:
        await msg.delete()
        await event.delete()
    elif event:
        time.sleep(0.5)
        await event.edit("–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        time.sleep(2)
        await event.delete()

# –ø—Ä
@m1kp.on(events.NewMessage(outgoing=True, pattern=r".–ø—Ä"))
async def pr(event):
    text = event.text.split()
    if event and text[1] == "1":
        await event.edit("–ü")
        time.sleep(0.1)
        await event.edit("–ü—Ä")
        time.sleep(0.1)
        await event.edit("–ü—Ä–∏")
        time.sleep(0.1)
        await event.edit("–ü—Ä–∏–≤")
        time.sleep(0.1)
        await event.edit("–ü—Ä–∏–≤–µ")
        time.sleep(0.1)
        await event.edit("–ü—Ä–∏–≤–µ—Ç")
        time.sleep(0.1)
        await event.edit("–ü—Ä–∏–≤–µ—Ç!")
    elif event and text[1] == "2":
        for i in range(1, 100):
            time.sleep(0.1)
            await event.edit("—Ä---------------")
            time.sleep(0.1)
            await event.edit("-–ø—Ä-------------")
            time.sleep(0.1)
            await event.edit("--–ø—Ä------------")
            time.sleep(0.1)
            await event.edit("---–ø—Ä-----------")
            time.sleep(0.1)
            await event.edit("----–ø—Ä----------")
            time.sleep(0.1)
            await event.edit("-----–ø—Ä---------")
            time.sleep(0.1)
            await event.edit("------–ø—Ä--------")
            time.sleep(0.1)
            await event.edit("-------–ø—Ä-------")
            time.sleep(0.1)
            await event.edit("--------–ø—Ä------")
            time.sleep(0.1)
            await event.edit("---------–ø—Ä-----")
            time.sleep(0.1)
            await event.edit("----------–ø—Ä----")
            time.sleep(0.1)
            await event.edit("-----------–ø—Ä---")
            time.sleep(0.1)
            await event.edit("------------–ø—Ä--")
            time.sleep(0.1)
            await event.edit("-------------–ø—Ä-")
            time.sleep(0.1)
            await event.edit("--------------–ø—Ä")
            time.sleep(0.1)
            await event.edit("-----------------–ø")
    elif event and text[1] == "3":
        await event.edit("–ß")
        await event.edit("–ß–£")
        await event.edit("–ß–£–í")
        await event.edit("–ß–£–í–ê")
        await event.edit("–ß–£–í–ê–ê")
        await event.edit("–ß–£–í–ê–ê–ê")
        await event.edit("–ß–£–í–ê–ê–ê–ê")
        await event.edit("–ß–£–í–ê–ê–ê–ê–ê")
        await event.edit("–ß–£–í–ê–ê–ê–ê–ê–ê")
        await event.edit("–ß–£–í–ê–ê–ê–ê–ê–ê–ê–ö –ó")
        await event.edit("–ß–£–í–ê–ê–ê–ê–ê–ê–ê–ö –ó–î")
        await event.edit("–ß–£–í–ê–ê–ê–ê–ê–ê–ê–ö –ó–î–ê")
        await event.edit("–ß–£–í–ê–ê–ê–ê–ê–ê–ê–ö –ó–î–ê–†")
        await event.edit("–ß–£–í–ê–ê–ê–ê–ê–ê–ê–ö –ó–î–ê–†–û")
        await event.edit("–ß–£–í–ê–ê–ê–ê–ê–ê–ê–ö –ó–î–ê–†–û–í")
        await event.edit("–ß–£–í–ê–ê–ê–ê–ê–ê–ê–ö –ó–î–ê–†–û–í–ê")

# –ø–æ–¥–æ–∂–¥–∏
@m1kp.on(events.NewMessage(outgoing=True, pattern=r".–∂–¥–∏"))
async def sec(event):
    if event:
        await event.edit("–ø–æ–¥–æ–∂–¥–∏ 5 —Å–µ–∫ –ø–∂")
        time.sleep(3)
        await event.edit("—è —á—É—Ç—å –∑–∞–Ω—è—Ç –ø—Ä–æ—Å—Ç–æ")

# –≤–æ
@m1kp.on(events.NewMessage(outgoing=True, pattern=r".–≤–æ"))
async def like(event):
    if event:
        await event.edit("üëç")

# –Ω–µ –≤–æ
@m1kp.on(events.NewMessage(outgoing=True, pattern=r".–Ω–µ–≤–æ"))
async def dislike(event):
    if event:
        await event.edit("üëé")

# —Å–∫—Ä–∏–ø—Ç—ã
@m1kp.on(events.NewMessage(outgoing=True, pattern=r".—Å–∫—Ä–∏–ø—Ç"))
async def script(event):
    text = event.text.split()
    if event and text[1]:
        if text[1] == "–ª–±":
            await event.edit("loadstring(game:HttpGet('https://raw.githubusercontent.com/m1kp0/DMO/refs/heads/main/ladder_breaker.lua'))()") # –ª–∞–¥–¥–µ—Ä –±—Ä–µ–∞–∫–µ—Ä –¥–º–æ
        elif text[1] == "–ª–±–≤6":
            await event.edit("loadstring(game:HttpGet('https://raw.githubusercontent.com/m1kp0/DMO/refs/heads/main/ladder_breaker_v6_beta.lua'))()") # –ª–∞–¥–¥–µ—Ä –±—Ä–µ–∞–∫–µ—Ä 6
        elif text[1] == "—á–∞—Ç–±–∞–π–ø–∞—Å—Å":
            await event.edit("loadstring(game:HttpGet'https://raw.githubusercontent.com/m1kp0/universal_scripts/refs/heads/main/chat_bypass.lua')()") # —á–∞—Ç –±–∞–π–ø–∞—Å—Å
        elif text[1] == "–∏—É—Ä":
            await event.edit("loadstring(game:HttpGet('https://raw.githubusercontent.com/alajayid/infiniteyield-reborn-reborn/master/source'))()") # –∏–Ω—Ñ–∏–Ω–∏—Ç–µ —É–∏–µ–ª–¥ —Ä–µ–±–æ—Ä–Ω
        elif text[1] == "–ø–∞—Ç—Ö": 
            await event.edit("loadstring(game:HttpGet('https://raw.githubusercontent.com/m1kp0/universal_scripts/refs/heads/main/ONLY-PC_pathing'))()") # pathing
        elif text[1] == "–ª–±–±":
            await event.edit("loadstring(game:HttpGet('https://raw.githubusercontent.com/m1kp0/lucky_block_battleground/refs/heads/main/lbb.lua'))()") # –ª–∞–∫–∏ –±–ª–æ–∫–∏
        elif text[1] == "–±–µ–∞—Ä":
            await event.edit("loadstring(game:HttpGet('https://raw.githubusercontent.com/m1kp0/auto_farm/refs/heads/main/bear_alpha.lua'))()") # –±–µ–∞—Ä –∞–ª—å—Ñ–∞ –∞–≤—Ç–æ—Ñ–∞—Ä–º
        elif text[1] == "—Ñ—Ä–∏–∞–¥–º–∏–Ω":
            await event.edit("loadstring(game:HttpGet('https://raw.githubusercontent.com/m1kp0/free_admin/refs/heads/main/free_admin_script.lua'))()") # —Ñ—Ä–∏ –∞–¥–º–∏–Ω —Å–∫—Ä–∏–ø—Ç
        elif text[1] == "—Ç–æ—Ö":
            await event.edit("loadstring(game:HttpGet('https://raw.githubusercontent.com/m1kp0/tower_of_hell/refs/heads/main/toh.lua'))()") # —Ç–∞–≤–µ—Ä –æ—Ñ —Ö–µ–ª–ª

# —Å–ø–∞–º
@m1kp.on(events.NewMessage(outgoing=True, pattern=r".—Å–ø–∞–º"))
async def spam(event):
    text = event.text.split()
    if event and text[1] and text[2]:
        await event.edit("—Å–ø–∞–º...")
        for i in range(int(text[2])):
            await m1kp.send_message(event.chat_id, text[1])
            time.sleep(0.1)
        
        await event.delete()


# –∑–∞–º–µ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏
@m1kp.on(events.NewMessage(outgoing=True, pattern=r".—Å–µ–π–≤"))
async def zametka_save(event):
    text = event.text.split()
    reply = await event.get_reply_message()
    if event and reply:
        zametks.append(reply.text)
        await event.edit(f"–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ")
    elif event and text[1]:
        zametks.append(text[1])
        await event.edit(f"–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ: {text[1]}")

@m1kp.on(events.NewMessage(outgoing=True, pattern=r".—É–¥–∞–ª–∏—Ç—å_—Å–µ–π–≤"))
async def zametka_delete(event):
    text = event.text.split()
    reply = event.get_reply_message()
    if event and text[1]:
        zametks.remove(text[1])
        await event.edit(f"—É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö: {text[1]}")
    elif event and reply:
        zametks.remove(reply.text)
        await event.edit("—É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö")

@m1kp.on(events.NewMessage(outgoing=True, pattern=r".–æ—á–∏—Å—Ç–∏—Ç—å_—Å–µ–π–≤—ã"))
async def clear_zametks(event):
    text = event.text.split()
    if event:
        zametks.clear()
        await event.edit("—É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

@m1kp.on(events.NewMessage(outgoing=True, pattern=r".—Å–µ–π–≤—ã"))
async def see_zametks(event):
    if event:
        for i in zametks:
            await m1kp.send_message(event.chat_id, i)
            event.delete()

@m1kp.on(events.NewMessage(outgoing=True, pattern=r".—Å–º"))
async def zametka_save(event):
    reply = await event.get_reply_message()
    if event and reply:
        await m1kp.send_message("me", reply)
        await event.edit("—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–µ–±–µ")
    else:
        await event.edit("—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        time.sleep(3)
        await event.delete()

# –≤—Ä–µ–º—è —Å–µ–π—á–∞—Å
@m1kp.on(events.NewMessage(outgoing=True, pattern=r".–≤—Ä–µ–º—è"))
async def zametka_save(event):
    if event:
        time_now = datetime.datetime.now().strftime("%H:%M:%S")
        await event.edit(f"–≤—Ä–µ–º—è —Å–µ–π—á–∞—Å: {time_now}")

# –∫–æ–º–∞–Ω–¥—ã
@m1kp.on(events.NewMessage(outgoing=True, pattern=r".–∫–æ–º–∞–Ω–¥—ã"))
async def zametka_save(event):
    if event:
        await event.edit(".- - —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n.–ø—Ä (1, 2, 3) - –ø—Ä–∏–≤–µ—Ç\n.–∂–¥–∏ - –ø—Ä–æ—Å–∏—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ–¥–æ–∂–¥–∞—Ç—å\n.–≤–æ - –ª–∞–π–∫\n.–Ω–µ–≤–æ - –¥–∏–∑–ª–∞–π–∫\n.—Å–∫—Ä–∏–ø—Ç (–ª–±, –ª–±–≤6, —á–∞—Ç–±–∞–π–ø–∞—Å—Å, –∏—É—Ä, –ø–∞—Ç—Ö, –ª–±–±, —Ñ—Ä–∏–∞–¥–º–∏–Ω, —Ç–æ—Ö) - –¥–∞—ë—Ç —Å–∫—Ä–∏–ø—Ç\n.—Å–µ–π–≤ - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ\n.—É–¥–∞–ª–∏—Ç—å_—Å–µ–π–≤ - —É–¥–∞–ª–∏—Ç—å —Å–µ–π–≤\n.–æ—á–∏—Å—Ç–∏—Ç—å_—Å–µ–π–≤—ã - –æ—á–∏—Å—Ç–∏—Ç—å —Å–µ–π–≤—ã\n.—Å–µ–π–≤—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n.–≤—Ä–µ–º—è - —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ–π—á–∞—Å\n.—Å–º - –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ\n.–∫–æ–º–∞–Ω–¥—ã - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã")

# —Å—Ç–∞—Ä—Ç
m1kp.start()
m1kp.run_until_disconnected()
